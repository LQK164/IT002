#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;
class Quaternion
{
private:
    int o, x, y, z;
public:
    Quaternion();
    Quaternion operator + (Quaternion);
    Quaternion operator - (Quaternion a);
    friend istream& operator >> (istream& is, Quaternion& a);
    friend ostream& operator << (ostream& os, Quaternion a);
};
istream& operator >> (istream& is, Quaternion& a)
{
    is >> a.o >> a.x >> a.y >> a.z;
    return is;
}
Quaternion::Quaternion()
{
    o = 0;
    x = 0;
    y = 0;
    z = 0;
}
Quaternion Quaternion :: operator + (Quaternion b)
{
    Quaternion KQ;
    KQ.o = o + b.o;
    KQ.x = x + b.x;
    KQ.y = y + b.y;
    KQ.z = z + b.z;
    return KQ;
}
Quaternion Quaternion :: operator - (Quaternion a)
{
    Quaternion KQ;
    KQ.o = o - a.o;
    KQ.x = x - a.x;
    KQ.y = y - a.y;
    KQ.z = z - a.z;
    return KQ;
}
ostream& operator << (ostream& os, Quaternion a)
{
    os << "(" << a.o << "," << a.x << "," << a.y << "," << a.z << ")";
    return os;
}
int main() {
    Quaternion a, b;
    cin >> a >> b;
    cout << a + b;
    cout << endl;
    cout << a - b;
    return 0;
}
